FT Tech Test
============

Overview
--------

> Build a web page that displays a random article from The Financial Times. You
> may use our Developer APIs to achieve this. Provide a search box for users
> to search for headlines containing specific words (i.e. searching for "brexit"
> should return a list of brexit-related headlines).

This repository contains a small web service that requests a random FT article
via it's search API[1] and displays it on the homepage. It also provides basic
search functionality that allows searching for a specific term and paging
through pages of results 20 at a time.

The server portion is written in Node which handles requests to the root and
/search endpoints as well as serving static assets via the node-static[1]
module.

The client makes use of the Origami[3] component library to mimic the FT look
and feel and utilizes basic client-side JavaScript to avoid full page reloads
by just requesting and updating the core content when searching.

[1]: https://developer.ft.com/portal/docs-api-v1-reference-search-search-api-tutorial
[2]: https://github.com/cloudhead/node-static/
[3]: https://origami.ft.com

Criteria
--------

The initial task had the following criteria.

This website should be:

[x] Server-side rendered
[x] Responsive
[x] Accessible
[x] Built using Javascript and node.js
[x] Not reliant on client-side frameworks (i.e. Angular, React) or libraries like jQuery

Extra Credit:

[x] Uses Origami Components
[x] Progressively enhanced
[x] Be deployed on Heroku
[x] Have a similar look and feel as ft.com
[ ] Performs well over 3G networks
[ ] Works offline

Usage
-----

There is an example server running on Heroku available at:

    http://ft-tech-test-aron.herokuapp.com

Configuration
-------------

Configuration is handled by environment variables. The following options
are supported:

PORT - Select the port to run the server on. e.g. PORT=8001
FT_API_KEY - Developer API Key for the FT API. e.g. FT_API_KEY=ABC123

Development
-----------

To install the developer packages you'll need node and npm installed on your
machine. Then run:

    $ npm install

You'll need an FT development account and API Key. You can create one online[1]

To run the server (with API Key):

    $ FT_API_KEY=MY_API_KEY npm start

Code is organized into two sections, server side node code is contained in
the /src directory and client side CSS & JS are in /static. The Mustache
templates for the server side rendering can be found in /templates.

The core files are as follows:

1. index.js is the main entry point to the application it creates the server
   and passes incoming requests over to handlers.
2. handlers.js handle each route pulling in data from the FT API and rendering
   an appropriate response.
3. render.js takes data from the handlers and renders a Mustache HTML template
   with the content provided.
4. api.js interfaces with the FT API and makes requests and processes the
   returned data.
5. static/main.js is the primary entry point for the front-end code, it mostly
   just handles loading the search endpoint via AJAX.

[1]: https://developer.ft.com/portal/docs-start-here

Dependencies
------------

The app is designed to run on the LTS version of Node and npm which were
v8.11.4 and 5.6.0 at last update.

Other than the FT API and Origami the following node libraries are used:

mustache - for simple-ish templating[1]
node-static - for serving the CSS & JavaScript [2]
lodash - for basic helper functions

These were all chosen to keep the number of dependencies to a minimum to
support portability and ease of deployment.

[1]: https://github.com/janl/mustache.js
[2]: https://github.com/cloudhead/node-static/
[3]: https://lodash.com

Areas of Improvement
--------------------

* PJAX style navigation is not ideal, it jumps to the top of the main content
  but could handle this better.
* History uses replaceState to ensure the refresh button works but should
  instead use pushState and popstate event to allow back/forward navigation.
* Could use a service worker to store UI chrome and last loaded quote.
* Better device support with more appropriate sizes and fonts for smaller
  screens.
* Minify, bundle and gzip assets.
* Proper routing.

License
-------

Available under the MIT license. See LICENSE file for details.
